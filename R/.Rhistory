#load all other packages
pacman::p_load(tidyverse, # tidy family and related pacakges below
kableExtra, # nice tables
ctmm,
fitdistrplus,
metRology,
DAAG,
ggdist,
lme4,
mgcv,
ggplot2, # post-hoc tests
gridExtra,
pander,   # nice tables
metafor,  # package for meta-analysis
ape,      # phylogenetic analysis
ggtree,
ggstance,
MuMIn,  # multi-model inference
patchwork,   # putting ggplots together - you need to install via devtool
here,    # making reading files easy
MASS,
cowplot #multipanel plots
)
data <- read.csv(here("data", "nmc_tracking_data.csv"))
data$WLH_ID <- as.factor(data$WLH_ID)
#Define when they are moving/resting
data$Active <- 0
data[which(data$est > 0),"Active"] <- 1
sum(data$Active == 1)
sum(data$Active == 0)
# Fit a scaled t distribution to all of the temperature data
all_temps <- fitdist(data$temp_c,
"t.scaled",
start=list(df=3,
mean = 5,
sd = 4))
coef(all_temps)
#Median and 95% quantiles
qt.scaled(c(0.025,0.5,0.975),
mean = coef(all_temps)[2],
sd = coef(all_temps)[3],
df = coef(all_temps)[1])
temps <- seq(-40, 30, length.out = 1000)
temp_ests <- all_temps$estimate
y_temp <- do.call(dt.scaled, c(list(x = temps), as.list(ests)))
library(ggplot2)
library(MASS)
library(fitdistrplus)
library(metRology)
library(DAAG)
library(ggdist)
library(gridExtra)
library(lme4)
library(mgcv)
----------------------
data <- read.csv("nmc_speeds2.csv")
data <- read.csv(here("data", "nmc_tracking_data.csv"))
data <- data[data$outlier !=1,]
#Get herd IDs
pink <- unique(data[data$Pop_Unit == "Pink Mountain","WLH_ID"])
muskwa <- unique(data[data$Pop_Unit == "Muskwa","WLH_ID"])
detrend.speeds <- function(DATA, CTMM) {
# estimate speeds conditional on the data
EST <- speeds(DATA, CTMM, fast=TRUE, level=NULL)
# null estimates of speed (no data, only model)
EST.NULL <- speeds(CTMM, t=DATA$t, fast=TRUE, level=NULL)
# reduce DOF by that of null distribution
DOF <- EST$DOF - EST.NULL$DOF
all(DOF>0) # check for validity... always has held so far
DOF <- pmax(0,DOF) # haven't needed this, but just in case
S2 <- EST$speed^2 + EST$VAR
AVE <- (EST$DOF*S2)/DOF
# Calculate CIs
CI <- sapply(1:length(DATA$t), function(i){ctmm:::chisq.ci(AVE[i], DOF=DOF[i], level=0.95, robust=TRUE)})
CI <- sqrt(CI)
SPEEDS <- as.data.frame(t(CI))
SPEEDS$time <- DATA$timestamp
return(SPEEDS)
}
#Convert to telemetry object
DATA <- as.telemetry(data)
#fit error parameters to calibration data
UERE<-uere.fit(DATA[[5]][2134:3099,])
#estimated error model parameters
summary(UERE)
#Drop mortality event
DATA[[5]] <- DATA[[5]][1:2134,] #[2134:3099,] #when there are lots of animals, consider just dropping it
FITS <- list()
for(i in 1:length(DATA)){
GUESS <- ctmm.guess(DATA[[i]],interactive=FALSE) #pre-step is guessing the initial parameters, if you run just this line alone for i=4 and interactive=TRUE you get a variogram you can zoom in on. You want to see curvature if you want to estimate speed. If you are estimating home range, you want to see it level off. Red line is model estimate, black line is actual data
GUESS$error <- TRUE #this is the DOP of 10 unless you do calibration (see above - lines 71 to 76)
FITS[[i]] <- ctmm.select(DATA[[i]], GUESS, trace = 2) #trace 2 shows you the model is running in the console
save(FITS, file = "nmc_models.Rda")
print(i)
}
#force install pacman
#install.packages("pacman")
#pacman::p_load(devtools, tidyverse, metafor, patchwork, R.rsp, emmeans)
#load all other packages
pacman::p_load(tidyverse, # tidy family and related pacakges below
kableExtra, # nice tables
ctmm,
fitdistrplus,
metRology,
DAAG,
ggdist,
lme4,
mgcv,
ggplot2, # post-hoc tests
gridExtra,
pander,   # nice tables
metafor,  # package for meta-analysis
ape,      # phylogenetic analysis
ggtree,
ggstance,
MuMIn,  # multi-model inference
patchwork,   # putting ggplots together - you need to install via devtool
here,    # making reading files easy
MASS,
cowplot #multipanel plots
)
#this is from nmc_modelling.R script
data <- read.csv(here("data", "nmc_tracking_data.csv"))
data <- data[data$outlier !=1,]
#Get herd IDs
pink <- unique(data[data$Pop_Unit == "Pink Mountain","WLH_ID"])
muskwa <- unique(data[data$Pop_Unit == "Muskwa","WLH_ID"])
detrend.speeds <- function(DATA, CTMM) {
# estimate speeds conditional on the data
EST <- speeds(DATA, CTMM, fast=TRUE, level=NULL)
# null estimates of speed (no data, only model)
EST.NULL <- speeds(CTMM, t=DATA$t, fast=TRUE, level=NULL)
# reduce DOF by that of null distribution
DOF <- EST$DOF - EST.NULL$DOF
all(DOF>0) # check for validity... always has held so far
DOF <- pmax(0,DOF) # haven't needed this, but just in case
S2 <- EST$speed^2 + EST$VAR
AVE <- (EST$DOF*S2)/DOF
# Calculate CIs
CI <- sapply(1:length(DATA$t), function(i){ctmm:::chisq.ci(AVE[i], DOF=DOF[i], level=0.95, robust=TRUE)})
CI <- sqrt(CI)
SPEEDS <- as.data.frame(t(CI))
SPEEDS$time <- DATA$timestamp
return(SPEEDS)
}
#Convert to telemetry object
DATA <- as.telemetry(data)
#summary(DATA) gives the sampling interval and coordinates if you want to plot the summary data
#plot(DATA) is a nice plot function to visualize the data
#plot(DATA, col=rainbow(length(DATA)))
#class(DATA[[1]])
#test<-DATA[[1]]
#head(test)
#HDOP is the measurement error (horizontal dilution of precision)
#test@info #this gives you the identity if you need the know the individual dataset
#test@UERE #each collar manufacturer will give a different value for this, it converts the DOP value into an error in meters (DOP of 1 is 10 meters)
#another example for errors: test<-oulie(turtle[[3]]) #you will see drifting in the movement, this is a vague spot where you have to make subjective decisions, cross that bridge when you get to it
#test<-oulie(DATA[[4]]) #the farther an animal gets away from it's core use area is more red and larger points (red is less informative - those are distance based outliers)
#head(test)
#plot(test) #the blue lines connect the locations, they get thicker and more blue as the speed increases (you want to see connections between paths, but watch for the angles, they shouldn't be too tight) (blue are more informative - these are the speed based outliers)
#plot(test, units=FALSE) #changes the units
#fit error parameters to calibration data
UERE<-uere.fit(DATA[[5]][2134:3099,])
#do not run uere.fit on data where they are actually moving
#estimated error model parameters
summary(UERE)
#Drop mortality event
DATA[[5]] <- DATA[[5]][1:2134,] #[2134:3099,] #when there are lots of animals, consider just dropping it
#uere.fit(DATA[[5]][2134:3099,])
FITS <- list()
for(i in 1:length(DATA)){
GUESS <- ctmm.guess(DATA[[i]],interactive=FALSE) #pre-step is guessing the initial parameters, if you run just this line alone for i=4 and interactive=TRUE you get a variogram you can zoom in on. You want to see curvature if you want to estimate speed. If you are estimating home range, you want to see it level off. Red line is model estimate, black line is actual data
GUESS$error <- TRUE #this is the DOP of 10 unless you do calibration (see above - lines 71 to 76)
FITS[[i]] <- ctmm.select(DATA[[i]], GUESS, trace = 2) #trace 2 shows you the model is running in the console
save(FITS, file = "nmc_models.Rda")
print(i)
}
